[{"/home/rupak/Desktop/re_proj/proj1/frontend/src/index.js":"1","/home/rupak/Desktop/re_proj/proj1/frontend/src/App.js":"2","/home/rupak/Desktop/re_proj/proj1/frontend/src/loginpg.js":"3","/home/rupak/Desktop/re_proj/proj1/frontend/src/signuppg.js":"4","/home/rupak/Desktop/re_proj/proj1/frontend/src/chk_sign.js":"5","/home/rupak/Desktop/re_proj/proj1/frontend/src/head.js":"6","/home/rupak/Desktop/re_proj/proj1/frontend/src/sidebar.js":"7","/home/rupak/Desktop/re_proj/proj1/frontend/src/routine_live.js":"8","/home/rupak/Desktop/re_proj/proj1/frontend/src/stats.js":"9"},{"size":220,"mtime":1618470574503,"results":"10","hashOfConfig":"11"},{"size":1690,"mtime":1619937424142,"results":"12","hashOfConfig":"11"},{"size":993,"mtime":1620654796703,"results":"13","hashOfConfig":"11"},{"size":2948,"mtime":1619798656161,"results":"14","hashOfConfig":"11"},{"size":1022,"mtime":1619063861203,"results":"15","hashOfConfig":"11"},{"size":1457,"mtime":1620044451892,"results":"16","hashOfConfig":"11"},{"size":496,"mtime":1620044410955,"results":"17","hashOfConfig":"11"},{"size":4772,"mtime":1620044327914,"results":"18","hashOfConfig":"11"},{"size":2600,"mtime":1620308817972,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1e1wm12",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"/home/rupak/Desktop/re_proj/proj1/frontend/src/index.js",[],["41","42"],"/home/rupak/Desktop/re_proj/proj1/frontend/src/App.js",[],"/home/rupak/Desktop/re_proj/proj1/frontend/src/loginpg.js",[],"/home/rupak/Desktop/re_proj/proj1/frontend/src/signuppg.js",[],"/home/rupak/Desktop/re_proj/proj1/frontend/src/chk_sign.js",[],"/home/rupak/Desktop/re_proj/proj1/frontend/src/head.js",[],"/home/rupak/Desktop/re_proj/proj1/frontend/src/sidebar.js",[],"/home/rupak/Desktop/re_proj/proj1/frontend/src/routine_live.js",["43"],"import React from 'react'\nimport './css/content.css'\n\nvar routine = require('./routine.json')\nvar curr_class;\nclass Routinelive extends React.Component{\n    constructor(){\n        super();\n        this.ext_date = this.ext_date.bind(this)\n        this.ext_time = this.ext_time.bind(this)\n        this.whole_date = this.whole_date.bind(this)\n        this.refresh = this.refresh.bind(this)\n        this.attendence = this.attendence.bind(this)\n        this.state = {days:null,routine:null,}\n    }\n    //time and date functions\n    ext_date(){\n        var date = new Date();\n        var day = date.getDay();\n        return day\n    }\n     whole_date(){\n        var date = new Date();\n        var day = date.getDate();\n        return day\n    }\n     ext_time(){\n        var time = new Date();\n        var time_now = time.getHours();\n        return (time_now)\n    }\n    //ends\n\n    async attendence(){\n        await fetch(\"http://localhost:8000/find_routine/\"+curr_class)\n        .then(res=>res.json())\n        .then((data)=>{\n            data.map(async(data)=>{\n                if(data[curr_class].date !== this.whole_date()){\n                    await fetch(\"http://localhost:8000/change_attendence/\"+this.whole_date()+\"/\"+curr_class+\"/\"+data[curr_class].attended)\n                    .then(alert('attendence has been recorded :)'))\n                }\n                else{\n                    alert('already attended :|')\n                }\n            })\n            \n            \n        })\n    }\n\n    componentDidMount(){\n        var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        this.setState({days:days[this.ext_date()]})\n        if (this.ext_date() !== 0 && this.ext_date() !== 6) {\n            var table_rows = routine[this.ext_date()-1].map((data) => {\n                if (this.ext_time() === data.S_Time) {\n                    curr_class = data.class_name.toLowerCase()\n                    return (\n                        <tr className=\"tr1\" style={{ backgroundColor: \"#13eb62\" }}>\n                            <td>{data.class_name}</td>\n                            <td>{data.class_code}</td>\n                            <td>{data.S_Time} : 00</td>\n                            <td>{data.E_Time} : 00</td>\n                            <td id = \"active_routine\" onClick = {()=>{this.attendence()}}>Ongoing</td>\n                        </tr>\n                    )\n                }\n                else if (this.ext_time() < data.S_Time) {\n                    return (\n                        <tr className=\"tr1\" style={{ backgroundColor: \"#ffbe19\" }}>\n                            <td>{data.class_name}</td>\n                            <td>{data.class_code}</td>\n                            <td>{data.S_Time} : 00</td>\n                            <td>{data.E_Time} : 00</td>\n                            <td>{data.Status}</td>\n                        </tr>\n                    )\n                }\n                else if (this.ext_time() > data.S_Time) {\n                    return (\n                        <tr className=\"tr1\" style={{ backgroundColor: \"#f57242\" }}>\n                            <td>{data.class_name}</td>\n                            <td>{data.class_code}</td>\n                            <td>{data.S_Time} : 00</td>\n                            <td>{data.E_Time} : 00</td>\n                            <td>Ended</td>\n                        </tr>\n                    )\n                }\n            })\n            this.setState({routine:table_rows})\n        }\n        else {\n            this.setState({routine:<h1 style={{ color: 'red', backgroundColor: 'aqua' }}>CHUTTI K DIN YAHA KYA KAAM!!! CHAL NIKALL</h1>})\n        }\n    }\n    refresh(){\n        this.componentDidMount();\n    }\n\n    render(){\n        return(\n            <div className=\"routd0\">\n            <span className=\"routs0\">\n                <table className='routtab0'>\n                    <thead>\n                        <tr>\n                            <th className=\"day_finder\">\n                                {this.state.days}\n                            </th>\n                        </tr>\n                        <tr className=\"tr1\" id=\"rout_table\">\n                            <th>SUBJECT</th>\n                            <th>SUB-CODE</th>\n                            <th>S-TIME</th>\n                            <th>E-TIME</th>\n                            <th>STATUS</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.routine}\n                    </tbody>\n                </table>\n                <button id=\"ref_but\" onClick = {()=>{this.refresh()}}>Refresh</button>\n                \n            </span>\n        </div>\n    )\n    }\n}\n\nexport default Routinelive","/home/rupak/Desktop/re_proj/proj1/frontend/src/stats.js",["44","45","46"],"import React, { useEffect, useState } from 'react'\nimport './css/content.css'\nimport { Bar, Doughnut, Pie } from 'react-chartjs-2'\nimport Chart from 'chart.js/auto'\nvar computer, maths, chemistry, electrical, mechanics, mechanical_lab, computer_lab, electrical_lab, chemistry_lab, english_lab\nvar Statreport = () => {\n    var [chart_dat, up_dat] = useState(null)\n    useEffect(() => {\n        fetch(\"http://localhost:8000/get_stats\")\n            .then(res => res.json())\n            .then(data => {\n                chemistry = data[0].chemistry\n                maths = data[0].maths\n                electrical = data[0].electrical\n                computer = data[0].computer\n                mechanics = data[0].mechanics\n                mechanical_lab = data[0].mechanical_lab\n                chemistry_lab = data[0].chemistry_lab\n                computer_lab = data[0].computer_lab\n                english_lab = data[0].english_lab\n                electrical_lab = data[0].electrical_lab\n\n\n                chemistry = chemistry.attended\n                maths = maths.attended\n                electrical = electrical.attended\n                computer = computer.attended\n                mechanics = mechanics.attended\n                mechanical_lab = mechanical_lab.attended\n                chemistry_lab = chemistry_lab.attended\n                computer_lab = computer_lab.attended\n                english_lab = english_lab.attended\n                electrical_lab = electrical_lab.attended\n                console.log(computer, chemistry, maths, electrical, mechanics, computer_lab, chemistry_lab, mechanical_lab, english_lab, electrical_lab)\n                up_dat({\n                    labels: ['computer', 'chemistry', 'maths', 'electrical', 'mechanics', 'computer_lab', 'chemistry_lab', \"mechanical_lab\", \"english_lab\", \"electrical_lab\"],\n                    datasets: [\n                        {\n                            label: \"ATTENDENCE STATUS\",\n                            data: [computer, chemistry, maths, electrical, mechanics, computer_lab, chemistry_lab, mechanical_lab, english_lab, electrical_lab],\n                            backgroundColor: ['red', '#06b2b8', 'orange', 'yellow', 'violet', 'darkGreen', 'magenta', 'brown', 'navy', '#ebab15']\n                        }\n                    ]\n                })\n            })\n\n    }, [])\n\n\n    return (\n        <div className = \"chart_cont\">\n            <p>data reflects no of attendence given till date</p>\n            <Doughnut data={chart_dat} options={{'fontStyle':\"bold\"}}/>\n        </div>\n    )\n}\n\nexport default Statreport",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":56,"column":68,"nodeType":"53","messageId":"54","endLine":56,"endColumn":70},{"ruleId":"55","severity":1,"message":"56","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":13},{"ruleId":"55","severity":1,"message":"59","line":3,"column":25,"nodeType":"57","messageId":"58","endLine":3,"endColumn":28},{"ruleId":"55","severity":1,"message":"60","line":4,"column":8,"nodeType":"57","messageId":"58","endLine":4,"endColumn":13},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'Bar' is defined but never used.","Identifier","unusedVar","'Pie' is defined but never used.","'Chart' is defined but never used.","no-global-assign","no-unsafe-negation"]